#!/bin/sh
#set -x

# Runs the show
main()
{
  try_gnu_args
  set_personality || exit 1

# Had to inline the next bit, coz it uses shift & args are local to functions
if [ -z "$1" ];then
  echo "Usage: $j <string> [<grep option>,...]" >&2
  exit 1
else
  k="$1"
  shift
fi

do_the_grep "$@"
}

# If we have GNU grep, set GNU args for grep, find & sed.
# I expect ufl & fl will fail with non-GNU utils,
# but the others should still work.
try_gnu_args()
{
  grep --version >/dev/null 2>&1 &&
  {
    n=-noleaf
    lb=--line-buffered
    INAME=-iname
    U=-u
    P=-print0
    Z=-0
    X=-xdev
  } ||
    { n=; lb=; INAME=-name; U=; P=; Z=; X=-mount; }
}

# Check for good invocation.
# sfl is designed to action symlinks to any of the following.
# Using a symlink modifies behaviour.
# list of symlinks:
# lrwxrwxrwx  1 root root     3 2004-09-30 22:12 afl -> sfl
# lrwxrwxrwx  1 root root     3 2004-09-30 22:12 aflc -> sfl
# lrwxrwxrwx  1 root root     3 2004-09-30 22:12 afll -> sfl
# lrwxrwxrwx  1 root root     3 2004-09-30 22:12 afllc -> sfl
# lrwxrwxrwx  1 root root     3 Mar  4 10:38 fl -> sfl
# lrwxrwxrwx  1 root root     3 Mar  4 10:38 flc -> sfl
# lrwxrwxrwx  1 root root     3 2004-09-30 22:12 sflc -> sfl
# lrwxrwxrwx  1 root root     3 2004-09-30 22:12 sfll -> sfl
# lrwxrwxrwx  1 root root     3 2004-09-30 22:12 sfllc -> sfl
# lrwxrwxrwx  1 root root     3 2004-09-30 22:12 ufl -> sfl
# lrwxrwxrwx  1 root root     3 2004-09-30 22:12 uflc -> sfl
# lrwxrwxrwx  1 root root     3 2004-09-30 22:12 ufll -> sfl
# lrwxrwxrwx  1 root root     3 2004-09-30 22:12 ufllc -> sfl
# lrwxrwxrwx  1 root root     3 Jul  3 15:17 xfl -> sfl
# lrwxrwxrwx  1 root root     3 Jul  3 15:19 xflc -> sfl
# lrwxrwxrwx  1 root root     3 Jul  3 15:19 xfll -> sfl
# lrwxrwxrwx  1 root root     3 Jul  3 15:19 xfllc -> sfl
# lrwxrwxrwx  1 root root     3 Jul  3 15:19 yfl -> sfl
# lrwxrwxrwx  1 root root     3 Jul  3 15:20 yflc -> sfl
# lrwxrwxrwx  1 root root     3 Jul  3 15:19 yfll -> sfl
# lrwxrwxrwx  1 root root     3 Jul  3 15:20 yfllc -> sfl
set_personality()
{
  j=`basename $0`
  named_extensions_only=true
  case $j in
  u*)
    f='.. -maxdepth 2 -mindepth 2'
    w=w
    ;;
  s*)
    f=.
    w=w
    ;;
  a*)
    f=.
    w=""
    ;;
  f*)
    f='. -maxdepth 1'
    w=w
    ;;
  x*)
    f=.
    w=w
    named_extensions_only=false
    ;;
  y*)
    f=.
    w=""
    named_extensions_only=false
    ;;
  *)
    echo bad symlink of sfl to $j
    return 1
    ;;
  esac
  case $j in
  ?fl | fl)
    i=''
    ;;
  ?fll)
    i=''
    f="$f -follow"
    ;;
  ?flc | flc)
    i=i
    ;;
  ?fllc)
    i=i
    f="$f -follow"
    ;;
  *)
    echo bad symlink of sfl to $j
    return 1
    ;;
  esac
  return 0
}

# Actually do the grep
do_the_grep()
{
  if $named_extensions_only
  then
    names='\( -name "*.c"
      -o -name "*.cpp"
      -o -name "*.cxx"
      -o -name "*.cc"
      -o -name "*.f"
      -o -name "*.for"
      -o -name "*.S"
      -o -name "*.h"
      -o -name "*.java"
      -o -name "*.exp"
      -o -name "*.tcl"
      -o -name "*.expect"
      -o -name "*.pl"
      -o -name "*.py"
      -o $INAME "makefile"
      -o -name "Kconfig"
      -o -name "*.i"
      -o -name "*.l"
      -o -name "*.lex"
      -o -name "*.y"
      -o -name "*.yacc"
      -o -name "*.sh" \)'
  else
    names=""
  fi
  { eval find $f $X $n -depth -type f $names $P |
      xargs $Z -n 32 -r grep $lb -${i}s${w}n "$@" -- "$k" /dev/null; } |
      sed $U 's?^[.]/??'
}
main "$@"
